<?xml version="1.0" encoding="UTF-8"?>
<suppressions xmlns="https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd">
    <suppress>
        <notes><![CDATA[
            # Description
            Pivotal Spring Framework through 5.3.16 suffers from a potential remote code execution (RCE) issue if used
            for Java deserialization of untrusted data. Depending on how the library is implemented within a product,
            this issue may or not occur, and authentication may be required. NOTE: the vendor's position is that
            untrusted data is not an intended use case. The product's behavior will not be changed because some
            users rely on deserialization of trusted data.
            # Comment
            Data serialization is performed by the Jenkins framework, nothing specific to this application.
        ]]></notes>
        <packageUrl regex="true">.*spring.*</packageUrl>
        <vulnerabilityName regex="false">CVE-2016-1000027</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
            # Description
            During Jelly (xml) file parsing with Apache Xerces, if a custom doctype entity is declared with a "SYSTEM"
            entity with a URL and that entity is used in the body of the Jelly file, during parser instantiation the
            parser will attempt to connect to said URL. This could lead to XML External Entity (XXE) attacks in Apache
            Commons Jelly before 1.0.1.
            # Comment
            This feature is not used in the application.
        ]]></notes>
        <packageUrl regex="true">.*jelly.*</packageUrl>
        <vulnerabilityName regex="false">CVE-2017-12621</vulnerabilityName>
    </suppress>
    <suppress>
        <notes><![CDATA[
            # Description
            Spring Security, versions 5.7 prior to 5.7.5 and 5.6 prior to 5.6.9 could be susceptible to authorization
            rules bypass via forward or include dispatcher types. Specifically, an application is vulnerable when all
            of the following are true:
             - The application expects that Spring Security applies security to forward and include dispatcher types.
             - The application uses the AuthorizationFilter either manually or via the authorizeHttpRequests() method.
             - The application configures the FilterChainProxy to apply to forward and/or include requests
               (e.g. spring.security.filter.dispatcher-types = request, error, async, forward, include).
             - The application may forward or include the request to a higher privilege-secured endpoint.
             - The application configures Spring Security to apply to every dispatcher type via
               authorizeHttpRequests().shouldFilterAllDispatcherTypes(true)
            # Comment
            The security setting is defined by the Jenkins application.
        ]]></notes>
        <packageUrl regex="true">.*spring-security.*</packageUrl>
        <vulnerabilityName regex="false">CVE-2022-31692</vulnerabilityName>
    </suppress>
</suppressions>